package content.motifFinding.profileMostProbable;

import bioObjects.profile.Profile;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import res.Sequences;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class MostProbableStringTest {

    Profile profile;
    String sequence;
    List<String> dna;
    int k;

    @BeforeEach
    void setUp() {
        sequence = "ATAAAGAACGAGTGGCCGAAGTCTTTACCGCAATATTACAGTACGGGTAGGTTACACTAAACGCATCCCTATCTCTAGAGGGAGCACCAAGTTTCACTGATCACTTCGCAAGTTAATCGGTTCTCTTATCCTCGATTGAGGGCCTCCCGGGATATACGCAACGTCCCATGGCTTAACTCCCTCTCCCACCGCTTATGGCTTTCCGTCAAGCTACAGTGCGGAGCGATGTCATATACAGTGTATATGGTGCCGTCCTGCAGAATGTGTTTAACATTGATTGTTTGAATACGTCACCAACTCTCCCTCATGGACGTTCTTACGAGTTGACATGGATGTTGTAAAGGCTCTATCACCGATTAGCACTCTAAATCGTCCATGGCGTAGGACTCCCACGGGGACTTGCGTTGGAGCCTTGAGAGCCACGTGATATAGTCACGAATGCAATGTACCGCGTTCCGCCCGTCACTTCGGGACCCAGCACGTCTCATGAAGTGACCGACGTTATGTAGGAATTCGTAGATATCACCGCCTATGATGACTGCATACAGGGGGCACTAAAGTATACATAGGCGACCAGGCGTCCAACGTTAGACCTAACTAAGCAGAGGGCTGTACGTTGAGATTATGCGGGAAGTTATCAGCCGGATGCTTTTATCATCGACAGACCGTTCAGTACTAGCTGCATCTTTATAAATTCGTTAGGGCACCAAACGGCTGCCATCGTAAGCGCGAACTACAGCACCAGTCCGGCTATTACGGTTACACATTTAGTAGGTTTAAGTTCAGGCACGCTGGCCTTTAGCGCATTAATCGATACGTACCTCGGCCCACTGCATTCAACAAGGAAGCCCAAGGCGGACATAACTGTACAGCAATAAAATTAGCAGTAGCCTGTTAATCTTCCTGCCCCAGAGCACCTAGACCGAAGCATATCAAAGTCCAAGCTCTGTACCCTCCCATAGAAATGCTTATTCAGCGCGCGTATAAAAACACAATGTTG";
        profile = new Profile(Sequences.NUCLEOTIDES, new double[][]{
                {0.258, 0.212, 0.242, 0.242, 0.167, 0.242, 0.227, 0.227, 0.303, 0.242, 0.273, 0.258, 0.258, 0.288, 0.258},
                {0.333, 0.227, 0.197, 0.318, 0.258, 0.318, 0.227, 0.197, 0.258, 0.288, 0.242, 0.258, 0.212, 0.288, 0.258},
                {0.242, 0.364, 0.303, 0.288, 0.318, 0.212, 0.303, 0.242, 0.197, 0.242, 0.242, 0.273, 0.242, 0.212, 0.273},
                {0.167, 0.197, 0.258, 0.152, 0.258, 0.227, 0.242, 0.333, 0.242, 0.227, 0.242, 0.212, 0.288, 0.212, 0.212}
        });

        dna = new ArrayList<>();

        String all = "AATTCGTTCAACAGCCGGGAAGAAGGCACAGAGGCGCATATAAACCGAGTGTCCTAGTGGAGACACATAGCTCCGTGATATCCCGAGTCAATAGTGAGAAGTCACTTCTCGTCCGTCACAGTACCGCCACTAGTTTCGATATTAAGGTCTTGCTGA AGTTATATGCTCGCGTGCATTGCAGGACCAACTATGCATGGGACTCTGTTAATTCTAGTCGTACCGATACTTGGCCTACGGTACCCCCCTTAGTGCTCACGTCCTGTGCCTCAAATGCAAGTGGCTGTCCTGAGTGACTACGTTGACACTCCCAAC CATTTCGCATAACCAACTAACACCGGCCAAATCCAAGGGACTTGCCGTCGTTTTACGGCTAAGGACCCACCTTAGCCAGGACCGCATGGGGATACCAAACTATAGAGGTGAACCCTCTGTCACACGCTTTTCGTACCGTGAATTGTGCACGAGTGG GTACCGGGATTCGAATGTACGCGTCAGGCAATTCGGAGGTGTTGACTCGGTCCCTCAACTTGCTGTTGACTGTGAGGAAGATTAAGTTCCGAAGATACAGACGGAACTGCGCCTAATCCTGTGTTACTAAGCCTCGCAGATTGAATAACGCCCAGA CCCCCGCTGCACACAAACAATGCCCCAAGGTCAGCTAGTATCGCCGGTTTGGAGTACTCCCCGTGGTAATTTCTCCGCGTTCGCGTACCGCCATTGGTCACATCCCGGTTGCTTAGTCTGCATCATGAGGAAACGGGGTAGGATACTGTTGGCTTC GAACTGACATGCTATTGTCGGAGGCAAAGCAAGCCCTGAAATTAGGGACTCCGTGAAGTCTCGAAAAGGTGTCAGCCATATCACCTTAGCGTCCCGCACGGGAGTTTCGTACCGAGACTCGCCCGGGTCCAGAACAAGTATATCACGTCGCCGTTT AGGTTACGGCCTCCTAGGAGGCATCTCTTTATGGTGGCTAGTTTGCACTGCCCAACCTCGTTGCCAAGAGCTCCCTCAGGCCTCCCTAAGAGCTGGGGCCTATGTAAAGTACCGACAATCCGATTGATTGTGGTCACACGGGAAAGAGCCTTACCG AGCATATACCTTGCGCTGTCGCGTAGATGGAACTTAGCACGTGGGAACTAGACTAAATACGTACCGGCAGTATACACGAGTTGGGGCGAGATGTGCTCGCTCGTCCACACCTAGTGTCTACCCGCTGCTTCCTTCCTCCTTTACCGTTGGGAATAA GGTTTCTAACAGTCGAGACCTATTCGTTGGGGTAAGCCACAAGACGATGCAGCCTGCTAGTCTATGAGATATGTACCGGTAATGTGTGGGAGCAGGTACATAGTGCGCGGACGCTACCCATGGCTCATTCACCTTACATTAATTGCCCGCGGACTC CCTTTGGGAACGTTTAGCATACGCTAACGCTACAACCATAGTACATCGAGTTGGCTATGGGAATCAGCACGGGATTGCCCTATAATGGTTAGGAACACTGAGTTACCCCTGGTATATTCAACTAGCGACTCCGGCTTTTTGTTTGTACCGAAAATA GCGACCGGATGATTTGTGATAACATGAATTATTTGATCAGAAAACACCAAATTGCGTTCTTCCACGGATTCAGGCCCATGATGGTCGACGAATAGGCCCCATAGATTTGCTGCCACGCCAGATCGGATGGCCTCCTCTGCGGCCGTACCGGGACTA TAGCATTCAGGAGGATCGCTTCTCGGGAAACCTAATAGTTGGGCGCCTTGTATCCCTCACTTCGTTTAAACCCCCACACTGCTTCTTTACCCCATTGGTGCCACGTCAAAATAGGTCCCCGTACCGGCATTGAGCATGTGTACGGAGGTTTTACCT CCGTGCAGCTGCAAGTGCAGGGGTCGCAGGGGGCTACTTCGCGCTAATCGTGAGTAGGACTACCTTGTTGGTTCTGCTACCCGCCTCTCATAGATCATCTCACCACACGATGAGCGTCCAGACGGTGGTGGTGTACCGGCACTCACTTTCCGTCTA AGTAACAGGACACCGCGCTTTACTGTCCGTGGGTAGAACGCGTAGATTATACGGTGTTCGTAATGTAGCACTTGTCGATCGCAGAGTCCGGGCTAGGCCAACTCCATGTGTCTGTTATAGACCCGTCAGCGAGTTGCTCTCCTTGTACCGTAATTG ACTGGCCCCTACTAAACCATTACGGGTTCTTGTCTATATCTCATTGGTTCATGCGTAACTAGAGTAAGCAAGACCAGGGTCCCCCCTGCTCCGTGTCCAGGTTAACAGCTGTACCGCTTTCCCTCGTACCATGTACCGTGAATGGAACCACTGATA CCCCGCAACAATCCCCGTCGACTGGGCTCTTAGCGAATTCGGATGGCGGACCATTGTAGTTGCGTAGGCCAGCATCCTTTCCTAATATACAATTAGGTACCGTCAATGCCATGAGCTTTTTGTAATCCCCAAGGACTTCTTCCCATTTTCGGCTCG CCTGTGTTGTTGATTATAGATAGTTCATAGGTTACAAGACCTGATTCCGGGTGTCGAGCCAGTCTGGTAGGAATTGATGAGCTCGTGTTATGCCGTGCAGAAGGCCCATTATGGGGTTTTAGAACTTCTACGACGTTCAGTACAGTACCGTCAGTC ACAAGAGCTTTTAGAACTCCAGTCACCATATTGGCTACTCCTCATATGACGGAGCCCATAGTACCGCAACTACGCTGATATCTCAATGGGTAATGGAACGAAAGAACTCTGTCGAGTAGGTGAATAGGATGTTCAGTAATCAGACATAGGGTACGC CATGTTCTAACTAGGTTGTATTCGCTTTCATACATTCAGATGTTAATCAACCTGCGATCGTCGTCTCTACAAATTGTACGCTTCGTACCGTAAATTCGATTAGCAGCACGGTTTGTCGGGATTACTTCGGCTCGCTGTGGTAGCGAACCTATAACT TACGTTGAATCTGAAATGTATAATGTACCGACAGTCTTAGCGGAGGGCCCACGCTGGGCTTAGGTCCAGAAGTGTGCAGAGCCTGCAATTGCGCGAGTGAGCCCTCGGTGGCATGGGACAAAACCCTCTTCACCCCAGGGCCTTCGAGTCTCGCAA TGGTTGTACACGTATTGACTATGCTACACTGCACAGATAGCGAGACCATATAAGCACATTGTTTTCCCCGAGTTACTTAGGCCTTTAGAACATCAAGTACCGTGATTTTTGTGGACGTCGCCGATCCAAGCGAGCATTGGTCCTCGGCTCAGAACC GCGAAGTCATTCTTGGGGACTGGGGTACCGCAAATTTTTATTTCATCAGCCGTTCCGACAGGTATTAATAGTGCCGCCCGGATCAATTAATATTGTATGCCGATGGTTAAGGCGGTTTTAACCTTTATTTACCTCCGAATAACGGGACAACAATTG TGCGCCATCCTCAGGAAATCACGATTATCAGGGGGTGGTGGTGAGTCGCTCCACCCTCGAGAGCGTCCACTCCCACGAACAGGAAGCTTACCCCGCACAAGTAATGCCGTACCGAGAATACATAGTCCACTCGGAGTCCCCCATGCTGGACAACCC GCTGAAAGATGACGACGACGTATAGTACCGGTAATGGTCTGAACTGACTATATCGAGTTGGATGAGCCTTGAACAATTTGACTACTCGACCAGATAGGCCTATTGCACTGCAACGGAGGGCATCGCATCTGCATCCAATGGTAGTTCACCACTATG CGCCTGCTGAATAACATTCGACATCTATGCTGGGGTAGTCGTCGACTAAACCCCAGCCGTCCTTTTACGGCCTGGAGGACGTGGGGAGGAGGGACGATATGATCGCCAGTACCGGTATTGCCGTGACCGTTGCCATCAGCTTCTCTCCCACATGTA";
        Collections.addAll(dna, all.split(" "));
        k = 12;
    }

    @Test
    void getMostProbable() {
        String mostProbable = MostProbableString.getMostProbable(profile, sequence);
        System.out.println(mostProbable);
    }

    @Test
    void findMotif() {
        List<String> motif = MostProbableString.findMotif(dna, Sequences.NUCLEOTIDES, k);
        for (String pattern :
                motif) {
            System.out.println(pattern);
        }
    }
}